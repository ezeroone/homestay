// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eZeroOne.MailService.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class CustomerInvoice : CustomerInvoiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"

<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
<title>customer's invoice</title>
<link href='http://fonts.googleapis.com/css?family=Lobster|Terminal+Dosis' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700|Lobster' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Lobster|Lobster+Two' rel='stylesheet' type='text/css'>

</head>

<body style=""font-family: 'Roboto',Arial, Helvetica, sans-serif; font-size: 12px; text-transform:lowercase;"">

<table width=""600px"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""margin-left: auto; margin-right: auto; margin-top: 100px;"">
  <tr style=""width:100%"">
     <td colspan=""2"">
           <div style=""background-color:#00A0DC;  font-size: 1px;line-height: 0.8em;height: 15px;"">&nbsp;-</div>
        </td>
    </tr>
    <tr style=""background-color:#FFF; text-align: left"">
    	<td valign=""top"" style=""padding-left: 20px; padding-right: 20px; padding-top: 30px; padding-bottom: 20px;background-color:#FFF;"">
        	<h1 style=""color:#00A0DC; font-size: 16px; font-weight: bold;"">globalspices online shopping</h1>
            <h2 style=""color:#333; font-size: 14px; font-weight: bold;"">Customer Invoice :: 
			");
            
            #line 32 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.CustomerName); 
            
            #line default
            #line hidden
            this.Write(@"			
			</h2>
			
        </td>
        <td valign=""top"" style=""text-align:right; padding-right: 20px;padding-top:30px;background-color:#FFF;"">
        	<img src=""~/Content/images/logo.gif"" width=""44"" height=""44"" alt="""">
        </td>
    </tr>
    
    <tr style=""background-color:#FFF; text-align: left"">
    	<td  style=""padding-left: 20px; padding-right: 20px; padding-top: 0px;font-size: 14px;"">
        	<b>
			Invoice Number :");
            
            #line 45 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.InvoiceId); 
            
            #line default
            #line hidden
            this.Write("\t\t\t</b>\r\n\t\t\t\r\n        </td>\r\n\t\t<td style=\"padding-left: 20px; padding-right: 20px" +
                    "; padding-top: 0px;font-size: 14px;\">\r\n        \t<b>\r\n\t\t\tInvoice Date :");
            
            #line 51 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.InvoicedDate.ToLongDateString()); 
            
            #line default
            #line hidden
            this.Write(@"			</b>
			
        </td>
    </tr>
    <tr> <td>&nbsp;</td> <td>&nbsp;</td>  </tr>
   <tr> <td>&nbsp;&nbsp;</td> <td>&nbsp;&nbsp;&nbsp;</td>  </tr>
    <tr style=""background-color:#FFF; text-align: left"">
   	  <td colspan=""2"" style=""padding-left: 20px; padding-right: 20px; padding-top: 0px; padding-bottom: 10px"">
          
		  <table class=""table table-bordered"">
              <thead>
                <tr>
                  <th style=""width:150px;"">Product</th>
				  <th style=""width:150px;"">Price</th>
                  <th style=""width:150px;"">Quantity</th>
				  <th style=""width:150px;"">Discount %</th>
                  <th style=""width:150px;"">Tax</th>
				  <th style=""width:150px;"">Total</th>
                  
				</tr>
              </thead>

  				");
            
            #line 74 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 foreach (var item in Invoice.ItemDetails)
					{
						
						WriteLine("<tr>");
						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">{0}</span>", new object[]{item.ItemName});
						WriteLine("</td>");

						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">${0}</span>", new object[]{item.Price.ToString("0.00")});
						WriteLine("</td>");

						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">{0}</span>", new object[]{item.Qty.ToString("0.00")});
						WriteLine("</td>");

						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">{0}</span>", new object[]{item.Discount.ToString("0.00")});
						WriteLine("</td>");

						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">${0}</span>", new object[]{item.Tax.ToString("0.00")});
						WriteLine("</td>");

						WriteLine("<td style=\"width:150px;\">");
						WriteLine("<span style=\"display: block; color: #3F3126; font-size: 12px; font-weight: bold; padding-top: 0px; padding-bottom: 4px;\">${0}</span>", new object[]{item.Total.ToString("0.00")});
						WriteLine("</td>");

						
						WriteLine("</tr>");
				  }
					
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t    <tr>\r\n                  <td colspan=\"5\" style=\"text-align:right\"><b>Tota" +
                    "l Price:</b>\t</td>\r\n                  <td>\r\n\t\t\t\t  $");
            
            #line 110 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.TotalAmount.ToString("0.00")); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\r\n\t\t\t\t  </td>\r\n                </tr>\r\n\t\t\t\t <tr>\r\n                  <td cols" +
                    "pan=\"5\" style=\"text-align:right\"><b>Total Discount:</b>\t</td>\r\n                 " +
                    "  <td> \r\n\t\t\t\t    $");
            
            #line 117 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.TotalDiscount.ToString("0.00")); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t   \r\n\t\t\t\t   </td>\r\n                </tr>\r\n                 <tr>\r\n            " +
                    "      <td colspan=\"5\" style=\"text-align:right\"><b>Total Tax:\t</b></td>\r\n        " +
                    "          <td>\r\n\t\t\t\t  \r\n\t\t\t\t   $");
            
            #line 125 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.TotalTax.ToString("0.00")); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t   \r\n\t\t\t\t  </td>\r\n                </tr>\r\n\t\t\t\t <tr>\r\n                  <td col" +
                    "span=\"5\" style=\"text-align:right\"><b>Total Bill Amount:\t</b></td>\r\n             " +
                    "     <td>\r\n\t\t\t\t   $");
            
            #line 132 "C:\Users\Navaseelan\Desktop\eShopping\eZeroOne.MailService\Templates\CustomerInvoice.tt"
 WriteLine(Invoice.BillAmount.ToString("0.00")); 
            
            #line default
            #line hidden
            this.Write(@"				    <span>==========</span>
				  </td>
                </tr>

               </table>         
        </td>
    </tr>
    
    <tr style=""background-color:#FFF; text-align: left;"">
    	<td colspan=""2"" style=""padding-top: 0px; padding-bottom: 30px; padding-left: 20px; padding-right: 20px;"">
       		<a href=""http://globalspices.com.au/"" target=""_blank"" style=""text-decoration: none; color:#00A0DC;font-size: 12px; "">more shopping...</a></td>
    </tr>
    
    <tr style=""background-color:#CECECE; text-align: left;"">
    	<td colspan=""2"" style=""padding: 20px; color: #FFF; font-size: 10px"">
       	</td>
    </tr>
    
</table>


</body>
</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class CustomerInvoiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
